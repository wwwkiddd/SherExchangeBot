import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    FSInputFile
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import aiohttp
from fpdf import FPDF
import os
from parser import get_usdt_buy_price, get_usdt_sell_price

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = '7865935276:AAHnnOtaXCfhAy3FqTgvCaW2p5SxgnVLeQ0'
MANAGER_ID = 1086033998
MANAGER_LINK = 'https://t.me/latnikova_d'
ADMIN_ID = 1086033998

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('exchange_bot.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT,
    phone TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    amount REAL,
    detail TEXT,
    status TEXT,
    time TEXT,
    rate REAL,
    rub_amount REAL
)
""")
conn.commit()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Registration(StatesGroup):
    EnterName = State()
    EnterPhone = State()


class BuyUSDT(StatesGroup):
    EnterAmount = State()
    EnterWallet = State()
    WaitManagerCard = State()
    WaitUserPayment = State()
    WaitManagerConfirm = State()


class SellUSDT(StatesGroup):
    EnterAmount = State()
    EnterCard = State()
    WaitManagerWallet = State()
    WaitUserSend = State()
    WaitManagerConfirm = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_user_reply_keyboard(is_registered: bool) -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton(text="üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å")],
    ]

    if not is_registered:
        keyboard.append([KeyboardButton(text="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")])
    else:
        keyboard.extend([
            [KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å USDT")],
            [KeyboardButton(text="üí∏ –ü—Ä–æ–¥–∞—Ç—å USDT")],
            [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ])

    keyboard.append([KeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_admin_reply_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (PDF)")],
            [KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –ë–î")],
        ],
        resize_keyboard=True
    )


def get_confirmation_keyboard(user_id: int, action: str) -> InlineKeyboardMarkup:
    if action == "buy":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel:{user_id}")]
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤–µ–ª USDT", callback_data=f"sent_sell:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_sell:{user_id}")]
        ])

cancel_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="cancel_deal")]
    ]
)



# –£—Ç–∏–ª–∏—Ç—ã
def user_exists(user_id: int) -> bool:
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    return cursor.fetchone() is not None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "/start")
async def start(message: Message):
    user_id = message.from_user.id
    is_registered = user_exists(user_id)

    if user_id == ADMIN_ID:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
            reply_markup=get_admin_reply_keyboard()
        )
    else:
        if is_registered == False:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –æ–Ω–ª–∞–π–Ω-–æ–±–º–µ–Ω–Ω–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –≥–¥–µ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á—ë—Ç–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\nüí∏ –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –æ–±–º–µ–Ω–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–∞–≤–Ω–æ –∏ –∑–Ω–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –ª—é–±—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.\n\n‚è∞ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö - 24/7.\n\nüí≥ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –¢–∞–¥–∂–∏–∫—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤ - —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ 115-–§–ó.\n\n‚¨ÜÔ∏è –£ –Ω–∞—Å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å USDT –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–∏—Å—Å–∏–π.\n\nüá∑üá∫ –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏:\n- –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –Ω–∞ –ª—é–±—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –†–§.\n- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ Usdt —Å –∫–∞—Ä—Ç –¢-–ë–∞–Ω–∫–∞ –∏ –°–±–µ—Ä–±–∞–Ω–∫–∞.\n\nüìä –í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –Ω–∏–∂–µ ‚¨á Ô∏è",
                reply_markup=get_user_reply_keyboard(is_registered)
            )
        if is_registered == True:
            await message.answer(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞-–æ–±–º–µ–Ω–Ω–∏–∫–∞ SherExchange!\n\nüìú –ü—Ä–∞–≤–∏–ª–∞ - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–±–º–µ–Ω–∞.\n\nüí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–∫—É–ø–∞–µ–º –∏ –ø—Ä–æ–¥–∞–µ–º USDT\n\nüõí –ö—É–ø–∏—Ç—å USDT - –ö—É–ø–∏—Ç—å USDT –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫.\n\nüí∏ –ü—Ä–æ–¥–∞—Ç—å USDT - –ü—Ä–æ–¥–∞—Ç—å –Ω–∞–º USDT –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É.\n\nüìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫.\n\n‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∏–∂–µ‚¨áÔ∏è",
                reply_markup=get_user_reply_keyboard(is_registered)
            )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message(F.text == "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.EnterName)


@dp.message(Registration.EnterName)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.EnterPhone)


@dp.message(Registration.EnterPhone)
async def reg_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    data = await state.get_data()
    cursor.execute(
        "INSERT OR REPLACE INTO users (id, name, phone) VALUES (?, ?, ?)",
        (message.from_user.id, data['name'], phone)
    )
    conn.commit()
    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞-–æ–±–º–µ–Ω–Ω–∏–∫–∞ SherExchange!\n\nüìú –ü—Ä–∞–≤–∏–ª–∞ - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ–±–º–µ–Ω–∞.\n\nüí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–∫—É–ø–∞–µ–º –∏ –ø—Ä–æ–¥–∞–µ–º USDT\n\nüõí –ö—É–ø–∏—Ç—å USDT - –ö—É–ø–∏—Ç—å USDT –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫.\n\nüí∏ –ü—Ä–æ–¥–∞—Ç—å USDT - –ü—Ä–æ–¥–∞—Ç—å –Ω–∞–º USDT –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É.\n\nüìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫.\n\n‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∏–∂–µ‚¨áÔ∏è",
        reply_markup=get_user_reply_keyboard(True)
    )
    await state.clear()


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
@dp.message(F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
async def handle_rules(message: Message):
    await message.answer(
        "–ü–æ–∫—É–ø–∫–∞:\n\n1. –ü–æ–∫—É–ø–∫–∞ USDT –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —É –ª–∏—Ü —Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç‚ùóÔ∏è\n2. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ 100 USDTÔ∏è‚ùóÔ∏è\n3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ 3000 USDT‚ùóÔ∏è\n\n–ü—Ä–æ–¥–∞–∂–∞:\n\n1. –ü—Ä–æ–¥–∞–∂–∞ USDT –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–ª—è –ª–∏—Ü —Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç‚ùóÔ∏è\n2. –ü—Ä–æ–¥–∞–∂–∞ USDT –¥–ª—è —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü –∑–∞–ø—Ä–µ—â–µ–Ω–∞‚ùóÔ∏è\n3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ 100 USDT‚ùóÔ∏è\n4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ 3000 USDT‚ùóÔ∏è",
        reply_markup=get_user_reply_keyboard(user_exists(message.from_user.id)))


@dp.message(F.text == "üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å")
async def handle_rate(message: Message):
    try:
        buy_rate = await get_usdt_buy_price()
        sell_rate = await get_usdt_sell_price()
        rate_msg = (
            f"üí∞ <b>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</b>\n\n"
            f"üîº –ö—É–ø–∏—Ç—å USDT (–≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ —É –Ω–∞—Å): <b>{round(buy_rate * 1.03, 2)} RUB</b>\n"
            f"üîΩ –ü—Ä–æ–¥–∞—Ç—å USDT (–≤—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–∞–º): <b>{round(sell_rate * 0.97, 2)} RUB</b>"
        )
        await message.answer(rate_msg, reply_markup=get_user_reply_keyboard(user_exists(message.from_user.id)))
    except Exception as e:
        logging.error(f"Rate error: {e}")
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "üë®‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def handle_manager(message: Message):
    await message.answer(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {MANAGER_LINK}",
                         reply_markup=get_user_reply_keyboard(user_exists(message.from_user.id)))


@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_user_stats(message: Message):
    user_id = message.from_user.id
    cursor.execute("""
        SELECT type, amount, rub_amount, status, time 
        FROM transactions 
        WHERE user_id = ?
        ORDER BY time DESC
        LIMIT 10
    """, (user_id,))

    transactions = cursor.fetchall()
    if transactions:
        text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n\n"
        for t in transactions:
            rub_amount = f" ({t[2]} RUB)" if t[2] else ""
            text += f"{t[4]}: {t[0]} {t[1]} USDT{rub_amount} ({t[3]})\n"
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."

    await message.answer(text, reply_markup=get_user_reply_keyboard(True))


# –ü–æ–∫—É–ø–∫–∞ USDT
@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å USDT")
async def buy_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –≤ USDT (–æ—Ç 100 USDT –¥–æ 3000 USDT):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BuyUSDT.EnterAmount)


@dp.message(BuyUSDT.EnterAmount)
async def buy_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if not 100 <= amount <= 3000:
            raise ValueError

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å —Å —É—á–µ—Ç–æ–º 3% –∫–æ–º–∏—Å—Å–∏–∏
        buy_rate = await get_usdt_buy_price()
        rub_amount = round(amount * buy_rate * 1.03, 2)

        await state.update_data(amount=amount, rub_amount=rub_amount, rate=buy_rate)
        await message.answer(f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rub_amount} RUB\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT-–∫–æ—à–µ–ª–µ–∫:", reply_markup=cancel_keyboard)
        await state.set_state(BuyUSDT.EnterWallet)
    except ValueError:
        await message.answer("‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 3000 USDT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"Buy amount error: {e}")
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message(BuyUSDT.EnterWallet)
async def buy_wallet(message: Message, state: FSMContext):
    wallet = message.text.strip()
    data = await state.get_data()
    amount = data['amount']
    rub_amount = data['rub_amount']
    rate = data['rate']
    user = message.from_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    cursor.execute(
        "INSERT INTO transactions (user_id, type, amount, detail, status, time, rate, rub_amount) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
        (user.id, 'buy', amount, wallet, 'pending', now, rate, rub_amount)
    )
    conn.commit()

    try:
        await bot.send_message(
            MANAGER_ID,
            f"üì• –ü–æ–∫—É–ø–∫–∞ {amount} USDT\n–ö–æ—à–µ–ª–µ–∫: {wallet}\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rub_amount} RUB\n–ö—É—Ä—Å: {rate} RUB/USDT\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})\n\n"
            f"üîÅ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã",
            parse_mode=None
        )
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        await state.set_state(BuyUSDT.WaitManagerCard)
    except Exception as e:
        logging.error(f"Manager notification error: {e}")
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# –ü—Ä–æ–¥–∞–∂–∞ USDT
@dp.message(F.text == "üí∏ –ü—Ä–æ–¥–∞—Ç—å USDT")
async def sell_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ –≤ USDT (–æ—Ç 100 USDT –¥–æ 3000 USDT):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SellUSDT.EnterAmount)


@dp.message(SellUSDT.EnterAmount)
async def sell_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if not 100 <= amount <= 3000:
            raise ValueError

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
        sell_rate = await get_usdt_sell_price()
        rub_amount = round(amount * sell_rate * 1.03, 2)

        await state.update_data(amount=amount, rub_amount=rub_amount, rate=sell_rate)
        await message.answer(f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: {rub_amount} RUB\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RUB:\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º (16 —Ü–∏—Ñ—Ä) –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤‚ùóÔ∏è", reply_markup=cancel_keyboard)
        await state.set_state(SellUSDT.EnterCard)

    except ValueError:
        await message.answer("‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 3000 USDT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"Sell amount error: {e}")
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message(SellUSDT.EnterCard)
async def sell_card(message: Message, state: FSMContext):
    try:
        card = message.text.strip()
        if not card or len(card) < 16:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–º–∏–Ω–∏–º—É–º 16 —Ü–∏—Ñ—Ä) –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")
            return

        data = await state.get_data()
        amount = data['amount']
        rub_amount = data['rub_amount']
        rate = data['rate']
        user = message.from_user
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        cursor.execute(
            "INSERT INTO transactions (user_id, type, amount, detail, status, time, rate, rub_amount) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (user.id, 'sell', amount, card, 'pending', now, rate, rub_amount)
        )
        conn.commit()

        await bot.send_message(
            MANAGER_ID,
            f"üì§ –ü—Ä–æ–¥–∞–∂–∞ {amount} USDT\n–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {rub_amount} RUB\n–ö—É—Ä—Å: {rate} RUB/USDT\n–ö–∞—Ä—Ç–∞: {card}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})\n\n"
            f"üîÅ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ USDT-–∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
            parse_mode=None
        )

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        await state.set_state(SellUSDT.WaitManagerWallet)

    except Exception as e:
        logging.error(f"Sell card error: {e}")
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message(F.reply_to_message, F.from_user.id == MANAGER_ID)
async def handle_manager_reply(message: Message):
    reply_msg = message.reply_to_message.text

    try:
        if "–ü–æ–∫—É–ø–∫–∞" in reply_msg:
            card = message.text.strip()
            user_id = int(reply_msg.split("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")[1].split("(")[1].split(")")[0])

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cursor.execute(
                "SELECT amount, rub_amount FROM transactions WHERE user_id = ? AND status = 'pending' AND type = 'buy' ORDER BY id DESC LIMIT 1",
                (user_id,)
            )
            transaction = cursor.fetchone()
            if not transaction:
                await message.reply("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É.")
                return

            amount, rub_amount = transaction

            await bot.send_message(
                user_id,
                f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {rub_amount} RUB –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n<code>{card}</code>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_confirmation_keyboard(user_id, "buy"),
                parse_mode=ParseMode.HTML
            )
            await message.reply("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        elif "–ü—Ä–æ–¥–∞–∂–∞" in reply_msg:
            wallet = message.text.strip()
            user_id = int(reply_msg.split("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")[1].split("(")[1].split(")")[0])

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cursor.execute(
                "SELECT amount, rub_amount FROM transactions WHERE user_id = ? AND status = 'pending' AND type = 'sell' ORDER BY id DESC LIMIT 1",
                (user_id,)
            )
            transaction = cursor.fetchone()
            if not transaction:
                await message.reply("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.")
                return

            amount, rub_amount = transaction

            await bot.send_message(
                user_id,
                f"üì§ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n<code>{wallet}</code>\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ: {rub_amount} RUB\n\n"
                f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_confirmation_keyboard(user_id, "sell"),
                parse_mode=ParseMode.HTML
            )
            await message.reply("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        logging.error(f"Manager reply error: {e}")
        await message.reply("‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")


@dp.callback_query(F.data.startswith("paid:"))
async def paid_confirm(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ: RUB, —Å—É–º–º–∞ USDT –∏ –∫–æ—à–µ–ª—ë–∫
    cursor.execute("""
        SELECT amount, rub_amount, detail FROM transactions 
        WHERE user_id = ? AND status = 'pending' AND type = 'buy'
        ORDER BY id DESC LIMIT 1
    """, (user_id,))
    result = cursor.fetchone()

    if not result:
        await callback.message.edit_text("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞.")
        return

    usdt_amount, rub_amount, wallet = result

    await bot.send_message(
        MANAGER_ID,
        f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É <b>{rub_amount} RUB</b>:\n\n"
        f"üîç –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.\n"
        f"–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{usdt_amount} USDT</b>\n"
        f"–Ω–∞ –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<code>{wallet}</code>\n\n"
        f"–ó–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"confirm:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{user_id}")]
        ]),
        parse_mode=ParseMode.HTML
    )

    await callback.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    await callback.answer()


@dp.callback_query(F.data.startswith("sent_sell:"))
async def sent_sell_confirm(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute("""
        SELECT amount, rub_amount, detail FROM transactions 
        WHERE user_id = ? AND status = 'pending' AND type = 'sell'
        ORDER BY id DESC LIMIT 1
    """, (user_id,))
    result = cursor.fetchone()

    if not result:
        await callback.message.edit_text("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞.")
        return

    usdt_amount, rub_amount, card_number = result

    await bot.send_message(
        MANAGER_ID,
        f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥ <b>{usdt_amount} USDT</b>\n"
        f"–Ω–∞ –∫–æ—à–µ–ª—ë–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ:\n\n"
        f"üîç –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{rub_amount} RUB</b>\n"
        f"–Ω–∞ –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<code>{card_number}</code>\n\n"
        f"–ó–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"confirm_sell:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_sell:{user_id}")]
        ]),
        parse_mode=ParseMode.HTML
    )

    await callback.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    await callback.answer()



# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
@dp.callback_query(F.data.startswith("confirm:"))
async def confirm_buy(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute(
        "UPDATE transactions SET status = 'completed' WHERE user_id = ? AND status = 'pending' AND type = 'buy'",
        (user_id,)
    )
    conn.commit()

    await bot.send_message(
        user_id,
        "‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! USDT –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.",
        reply_markup=get_user_reply_keyboard(True)
    )
    await callback.message.edit_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_sell:"))
async def confirm_sell(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute(
        "UPDATE transactions SET status = 'completed' WHERE user_id = ? AND status = 'pending' AND type = 'sell'",
        (user_id,)
    )
    conn.commit()

    await bot.send_message(
        user_id,
        "‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! RUB –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É.",
        reply_markup=get_user_reply_keyboard(True)
    )
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–æ–∫
@dp.callback_query(F.data.startswith("cancel:"))
async def cancel_buy(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute(
        "UPDATE transactions SET status = 'cancelled' WHERE user_id = ? AND status = 'pending' AND type = 'buy'",
        (user_id,)
    )
    conn.commit()

    await bot.send_message(
        user_id,
        "‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_user_reply_keyboard(True)
    )
    await bot.send_message(MANAGER_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∫—É–ø–∫—É.")
    await callback.message.edit_text("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


@dp.callback_query(F.data.startswith("cancel_sell:"))
async def cancel_sell(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute(
        "UPDATE transactions SET status = 'cancelled' WHERE user_id = ? AND status = 'pending' AND type = 'sell'",
        (user_id,)
    )
    conn.commit()

    await bot.send_message(
        user_id,
        "‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_user_reply_keyboard(True)
    )
    await bot.send_message(MANAGER_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ–¥–∞–∂—É.")
    await callback.message.edit_text("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("decline:"))
async def decline_payment(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute(
        "UPDATE transactions SET status = 'failed' WHERE user_id = ? AND status = 'pending' AND type = 'buy'",
        (user_id,)
    )
    conn.commit()

    await bot.send_message(
        user_id,
        f"‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {MANAGER_LINK}",
        reply_markup=get_user_reply_keyboard(True)
    )
    await callback.message.edit_text("‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    await callback.answer()


@dp.callback_query(F.data.startswith("decline_sell:"))
async def decline_sell(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    cursor.execute(
        "UPDATE transactions SET status = 'failed' WHERE user_id = ? AND status = 'pending' AND type = 'sell'",
        (user_id,)
    )
    conn.commit()

    await bot.send_message(
        user_id,
        f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {MANAGER_LINK}",
        reply_markup=get_user_reply_keyboard(True)
    )
    await callback.message.edit_text("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    await callback.answer()

@dp.callback_query(F.data == "cancel_deal")
async def cancel_current_deal(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. ",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_user_reply_keyboard(user_exists(callback.from_user.id))
    )
    await callback.answer()


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(F.text == "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(
        f"ID: {u[0]}, –ò–º—è: {u[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {u[2]}" for u in users
    ) if users else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await message.answer(text)


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (PDF)")
async def admin_stats_pdf(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        filename = generate_stats_pdf()

        if os.path.exists(filename):
            await message.answer_document(
                FSInputFile(filename),
                caption="üìä –û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º"
            )
            os.remove(filename)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")

    except Exception as e:
        logging.error(f"PDF generation error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")


@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å –ë–î")
async def admin_db(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    file = FSInputFile("exchange_bot.db")
    await message.answer_document(file, caption="üì• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")


def generate_stats_pdf():
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('Roboto', '', 'Roboto.ttf', uni=True)
    pdf.set_font('Roboto', '', 9)

    pdf.cell(200, 10, txt="–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º", ln=1, align='C')
    pdf.cell(200, 10, txt=datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ln=1, align='C')
    pdf.ln(10)

    cursor.execute("""
        SELECT t.id, u.id, u.name, u.phone, t.type, t.amount, t.rub_amount, t.status, t.time 
        FROM transactions t
        JOIN users u ON t.user_id = u.id
        ORDER BY t.time DESC
    """)
    transactions = cursor.fetchall()

    pdf.set_fill_color(200, 220, 255)
    pdf.cell(15, 10, "ID", 1, 0, 'C', True)
    pdf.cell(20, 10, "User ID", 1, 0, 'C', True)
    pdf.cell(30, 10, "–ò–º—è", 1, 0, 'C', True)
    pdf.cell(30, 10, "–¢–µ–ª–µ—Ñ–æ–Ω", 1, 0, 'C', True)
    pdf.cell(20, 10, "–¢–∏–ø", 1, 0, 'C', True)
    pdf.cell(25, 10, "USDT", 1, 0, 'C', True)
    pdf.cell(25, 10, "RUB", 1, 0, 'C', True)
    pdf.cell(25, 10, "–°—Ç–∞—Ç—É—Å", 1, 0, 'C', True)
    pdf.cell(30, 10, "–í—Ä–µ–º—è", 1, 1, 'C', True)

    for t in transactions:
        if t[7] == 'completed':
            pdf.set_text_color(0, 128, 0)
        elif t[7] == 'cancelled':
            pdf.set_text_color(255, 0, 0)
        else:
            pdf.set_text_color(0, 0, 0)

        pdf.cell(15, 10, str(t[0]), 1)
        pdf.cell(20, 10, str(t[1]), 1)
        pdf.cell(30, 10, t[2][:20] if t[2] else "-", 1)
        pdf.cell(30, 10, t[3] if t[3] else "-", 1)
        pdf.cell(20, 10, t[4], 1)
        pdf.cell(25, 10, str(t[5]), 1)
        pdf.cell(25, 10, str(t[6]) if t[6] else "-", 1)
        pdf.cell(25, 10, t[7], 1)
        pdf.cell(30, 10, t[8][:16], 1, 1)
        pdf.set_text_color(0, 0, 0)

    pdf.ln(10)
    pdf.set_font('Roboto', '', 12)

    cursor.execute("SELECT COUNT(*) FROM transactions WHERE status = 'completed'")
    completed = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM transactions WHERE status = 'cancelled'")
    cancelled = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM transactions WHERE status = 'pending'")
    pending = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(amount) FROM transactions WHERE status = 'completed' AND type = 'buy'")
    total_buy = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(rub_amount) FROM transactions WHERE status = 'completed' AND type = 'buy'")
    total_buy_rub = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(amount) FROM transactions WHERE status = 'completed' AND type = 'sell'")
    total_sell = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(rub_amount) FROM transactions WHERE status = 'completed' AND type = 'sell'")
    total_sell_rub = cursor.fetchone()[0] or 0

    pdf.cell(0, 10, f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {completed + cancelled + pending}", ln=1)
    pdf.cell(0, 10, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}", ln=1)
    pdf.cell(0, 10, f"–û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}", ln=1)
    pdf.cell(0, 10, f"–í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}", ln=1)
    pdf.cell(0, 10, f"–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ USDT: {total_buy} (–Ω–∞ {total_buy_rub} RUB)", ln=1)
    pdf.cell(0, 10, f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ USDT: {total_sell} (–Ω–∞ {total_sell_rub} RUB)", ln=1)

    filename = f"transactions_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    pdf.output(filename)
    return filename


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
